#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const clientSessions = require('client-sessions'),
      config = require('../lib/configuration'),
      express = require('express'),
      fs = require('fs'),
      passport_google = require('../lib/passport_google'),
      //passport_hotmail = require('../lib/passport_hotmail'),
      passport_yahoo = require('../lib/passport_yahoo'),
      //passport_google = require('../lib/passport_google_oauth2'),
      path = require('path'),
      routes = require('../routes'),
      util = require('util'),
      logger = require('../lib/logging').logger;

var app;

// ./server is our current working directory
process.chdir(path.dirname(__dirname));

logger.debug("config.get('use_https')=", config.get('use_https'));
if (config.get('use_https')) {
  try {
    var privateKey = fs.readFileSync('config/privatekey.pem').toString();
    var certificate = fs.readFileSync('config/certificate.pem').toString();
    app = express.createServer({key: privateKey, cert: certificate});
  } catch (e) {
    logger.error('You must setup config/privatekey.pem and config/certificate.pem');
    logger.error('See docs/DEV_NOTES.md for details.');
    throw e;
  }
} else {
  app = express.createServer();
}


app.set('views', path.join(__dirname, '..', 'views'));
app.set('view engine', 'ejs');
app.use(express.bodyParser());
app.use(express.methodOverride());

var sess_config = config.get('client_sessions');
logger.debug('sess_config=', sess_config);
app.use(clientSessions({
  cookieName: sess_config.cookie_name,
  secret:     sess_config.secret,
  duration:   sess_config.duration
}));

app.use(express.csrf());
app.use(function (req, resp, next) {
  resp.local('csrf_token', req.session._csrf);
  next();
});

logger.debug(config.get('browserid_server'));
app.use(function (req, res, next) {
      logger.info('REQUEST:' + req.method + ' ' + req.url);
      next();
});

passport_google.init(app);
//passport_hotmail.init(app);
passport_yahoo.init(app);
app.use(app.router);
routes.init(app);
passport_google.views(app);
//passport_hotmail.views(app);
passport_yahoo.views(app);

var static_root = path.join(__dirname, '..', '..', 'static');
app.use(express.static(static_root));

if (config.get('use_https')) {
  app.listen(443);
  logger.debug(util.format('Everyone is welcome in the Persona ID Big Tent... Even you. Listening on https://%s', config.get('issuer')));
} else {
  var port = process.env['PORT'] || 3030;
  app.listen(port, '0.0.0.0');
  logger.debug(util.format('Everyone is welcome in the Persona ID Big Tent... Even you. Listening on http://%s:%s', config.get('issuer'), port));
}
