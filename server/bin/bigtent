#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path = require('path');

// ./server is our current working directory
process.chdir(path.dirname(__dirname));

const
clientSessions = require('client-sessions'),
config = require('../lib/configuration'),
express = require('express'),
fs = require('fs'),
healthCheck = require('../lib/startup_health_check'),
i18n = require('i18n-abide'),
passport_google = require('../lib/passport_google'),
passport_windowslive = require('../lib/passport_windowslive'),
passport_yahoo = require('../lib/passport_yahoo'),
routes = require('../routes'),
statsd = require('../lib/statsd'),
util = require('util'),
logger = require('../lib/logging').logger;

var app;

logger.debug("config.get('use_https')=", config.get('use_https'));
if (config.get('use_https')) {
  try {
    var privateKey = fs.readFileSync('config/privatekey.pem').toString();
    var certificate = fs.readFileSync('config/certificate.pem').toString();
    app = express.createServer({key: privateKey, cert: certificate});
  } catch (e) {
    logger.error('You must setup config/privatekey.pem and config/certificate.pem');
    logger.error('See docs/DEV_NOTES.md for details.');
    throw e;
  }
} else {
  app = express.createServer();
}


app.set('views', path.join(__dirname, '..', 'views'));
app.set('view engine', 'ejs');
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(express.logger());

var sess_config = config.get('client_sessions');
logger.debug('sess_config=', sess_config);
app.use(clientSessions({
  cookieName: sess_config.cookie_name,
  secret:     sess_config.secret,
  duration:   sess_config.duration
}));

app.use(express.csrf());
app.use(function (req, resp, next) {
  resp.local('csrf_token', req.session._csrf);
  next();
});

// limit all content bodies to 10kb, at which point we'll forcefully
// close down the connection.
app.use(express.limit("10kb"));

app.use(i18n.abide({
  supported_languages: config.get('supported_languages'),
  default_lang: config.get('default_lang'),
  debug_lang: config.get('debug_lang'),
  locale_directory: config.get('locale_directory'),
  disable_locale_check: config.get('disable_locale_check')
}));

passport_google.init(app);
passport_windowslive.init(app);
passport_yahoo.init(app);
app.use(app.router);
routes.init(app);
passport_google.views(app);
passport_windowslive.views(app);
passport_yahoo.views(app);

var static_root = path.join(__dirname, '..', '..', 'static');
app.use(express.static(static_root));

var lstnUrl;
var port;
if (config.get('use_https')) {
  port = 443;
  app.listen(443);
  lstnUrl = util.format('https://%s', config.get('issuer'));
} else {
  port = process.env.PORT || 3030;
  app.listen(port, '0.0.0.0');
  lstnUrl = util.format('http://%s:%s', config.get('issuer'), port);
}
statsd.increment('server.started');
process.nextTick(function () {
  // 1) Line is used by test/lib/start_stop.js
  // 2) Dev/Ops feedback
  console.log('Everyone is welcome in the Persona ID Big Tent... Even you. Listening on ' + lstnUrl);

  healthCheck();
});